Metadata-Version: 2.1
Name: src
Version: 0.0.1
Summary: A small package for Movie Recommender System
Home-page: https://github.com/nahin/Books-Recommender-System-Using-Machine-Learning
Author: nahin
Author-email: nahin.alam@northsouth.edu
License: MIT
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: streamlit
Requires-Dist: numpy

### Code Overview
The provided Python script is for building a book recommender system. It processes and analyzes data from three CSV files: 'Books.csv', 'Users.csv', and 'Ratings.csv'. The script uses Pandas, NumPy, and Scikit-learn for data manipulation, analysis, and modeling.

#### 1. Importing Libraries
The script begins by importing the necessary libraries, including NumPy, Pandas, Matplotlib, and Seaborn.

#### 2. Mounting Google Drive
It connects to Google Drive using the Google Colab library. This is likely done to access the CSV files stored on Google Drive.

#### 3. Reading and Preprocessing Data
The script reads data from the three CSV files ('Books.csv', 'Users.csv', and 'Ratings.csv') and stores them in dataframes. It then performs data preprocessing steps:

- Filters out users who have rated less than 100 books.
- Merges the 'ratings' and 'books' dataframes to create 'BookwithRatings'.
- Drops unnecessary image URL columns from 'BookwithRatings'.
- Filters out books with fewer than 50 ratings.
- Removes duplicate rows based on the combination of 'User-ID' and 'Book-Title'.
- Creates a pivot table where rows represent book titles, columns represent user IDs, and values represent book ratings. Missing values are filled with 0.

#### 4. Building a Recommendation Model
The script builds a recommendation model using K-nearest neighbors (KNN) and KMeans clustering:

- It imports the NearestNeighbors class and creates a KNN model.
- The model is fitted with the data from the pivot table.
- Book names are extracted from the pivot table index.
- The model is saved to files using the `pickle` module for future use.

#### 5. Recommending Books with KNN
- It defines a function 'recommend_book' that takes a book name as input and recommends similar books using the K-nearest neighbors model.
- The function finds the index of the input book in the pivot table, calculates distances, and suggests similar books.
- Recommended books are printed.

#### 6. Applying KMeans Clustering
- It creates a KMeans clustering model with 5 clusters.
- The model is fitted with the pivot table data.
- Cluster labels are predicted for each book in the pivot table.

#### 7. Recommending Books with KMeans Clustering
- It defines a function 'recommend_book_kmeans' to recommend books based on KMeans clustering. It takes a book name and the number of recommendations as inputs.
- The function checks if the input book is in the pivot table.
- It finds the cluster label of the input book.
- Books in the same cluster as the input book are identified.
- Euclidean distances between the input book and others in the same cluster are calculated.
- Recommended books are sorted by similarity and printed.

#### 8. User Interaction
The script allows the user to input a book name and then recommends similar books based on both KNN and KMeans clustering.

### Summary
This script reads and preprocesses book-related data from CSV files, builds a book recommender system using K-nearest neighbors (KNN) and KMeans clustering, and allows users to get book recommendations by providing a book name. It also saves the model and data for future use.
